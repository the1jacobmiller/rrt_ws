// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multi_lidar_fusion_config.proto

#include "multi_lidar_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_multi_5flidar_5ffusion_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_multi_5flidar_5ffusion_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MlfDistanceWeight;
}  // namespace protobuf_multi_5flidar_5ffusion_5fconfig_2eproto
namespace apollo {
namespace perception {
namespace lidar {
class MlfDistanceWeightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfDistanceWeight>
      _instance;
} _MlfDistanceWeight_default_instance_;
class MlfDistanceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfDistanceConfig>
      _instance;
} _MlfDistanceConfig_default_instance_;
class MlfTrackObjectMatcherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfTrackObjectMatcherConfig>
      _instance;
} _MlfTrackObjectMatcherConfig_default_instance_;
class MlfTrackerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfTrackerConfig>
      _instance;
} _MlfTrackerConfig_default_instance_;
class MlfMotionFilterConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfMotionFilterConfig>
      _instance;
} _MlfMotionFilterConfig_default_instance_;
class MlfMotionRefinerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfMotionRefinerConfig>
      _instance;
} _MlfMotionRefinerConfig_default_instance_;
class MlfShapeFilterConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfShapeFilterConfig>
      _instance;
} _MlfShapeFilterConfig_default_instance_;
class MlfEngineConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MlfEngineConfig>
      _instance;
} _MlfEngineConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
namespace protobuf_multi_5flidar_5ffusion_5fconfig_2eproto {
static void InitDefaultsMlfDistanceWeight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfDistanceWeight_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfDistanceWeight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfDistanceWeight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MlfDistanceWeight =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMlfDistanceWeight}, {}};

static void InitDefaultsMlfDistanceConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfDistanceConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfDistanceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfDistanceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MlfDistanceConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMlfDistanceConfig}, {
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfDistanceWeight.base,}};

static void InitDefaultsMlfTrackObjectMatcherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.DefaultConstruct();
  *::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get_mutable() = ::std::string("MultiHmBipartiteGraphMatcher", 28);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get_mutable());
  ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.DefaultConstruct();
  *::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get_mutable() = ::std::string("GnnBipartiteGraphMatcher", 24);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_MlfTrackObjectMatcherConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfTrackObjectMatcherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MlfTrackObjectMatcherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMlfTrackObjectMatcherConfig}, {}};

static void InitDefaultsMlfTrackerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfTrackerConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfTrackerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfTrackerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MlfTrackerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMlfTrackerConfig}, {}};

static void InitDefaultsMlfMotionFilterConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfMotionFilterConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfMotionFilterConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfMotionFilterConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MlfMotionFilterConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMlfMotionFilterConfig}, {}};

static void InitDefaultsMlfMotionRefinerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfMotionRefinerConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfMotionRefinerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfMotionRefinerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MlfMotionRefinerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMlfMotionRefinerConfig}, {}};

static void InitDefaultsMlfShapeFilterConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfShapeFilterConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfShapeFilterConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfShapeFilterConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MlfShapeFilterConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMlfShapeFilterConfig}, {}};

static void InitDefaultsMlfEngineConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfEngineConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfEngineConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfEngineConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MlfEngineConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMlfEngineConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MlfDistanceWeight.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MlfDistanceConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MlfTrackObjectMatcherConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MlfTrackerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MlfMotionFilterConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MlfMotionRefinerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MlfShapeFilterConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MlfEngineConfig.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, sensor_name_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, location_dist_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, direction_dist_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, bbox_size_dist_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, point_num_dist_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, histogram_dist_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, centroid_shift_dist_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, bbox_iou_dist_weight_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, foreground_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, background_weights_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, foreground_mathcer_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, background_matcher_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, bound_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, max_match_distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, filter_name_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, use_adaptive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, use_breakdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, use_convergence_boostup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, init_velocity_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, init_acceleration_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, measured_velocity_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, predict_variance_per_sqrsec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, boostup_history_size_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, boostup_history_size_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, converged_confidence_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, noise_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, trust_orientation_range_),
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  4,
  0,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, claping_acceleration_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, claping_speed_threshold_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, bottom_points_ignore_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, top_points_ignore_threshold_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, main_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, use_histogram_for_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, histogram_bin_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, output_predict_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, reserved_invisible_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, use_frame_timestamp_),
  ~0u,
  2,
  3,
  0,
  4,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::perception::lidar::MlfDistanceWeight)},
  { 21, 28, sizeof(::apollo::perception::lidar::MlfDistanceConfig)},
  { 30, 39, sizeof(::apollo::perception::lidar::MlfTrackObjectMatcherConfig)},
  { 43, 49, sizeof(::apollo::perception::lidar::MlfTrackerConfig)},
  { 50, 67, sizeof(::apollo::perception::lidar::MlfMotionFilterConfig)},
  { 79, 86, sizeof(::apollo::perception::lidar::MlfMotionRefinerConfig)},
  { 88, 95, sizeof(::apollo::perception::lidar::MlfShapeFilterConfig)},
  { 97, 108, sizeof(::apollo::perception::lidar::MlfEngineConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfDistanceWeight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfDistanceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfTrackObjectMatcherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfTrackerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfMotionFilterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfMotionRefinerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfShapeFilterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MlfEngineConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "multi_lidar_fusion_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037multi_lidar_fusion_config.proto\022\027apoll"
      "o.perception.lidar\"\240\002\n\021MlfDistanceWeight"
      "\022\032\n\020sensor_name_pair\030\001 \001(\t:\000\022\037\n\024location"
      "_dist_weight\030\002 \001(\002:\0010\022 \n\025direction_dist_"
      "weight\030\003 \001(\002:\0010\022 \n\025bbox_size_dist_weight"
      "\030\004 \001(\002:\0010\022 \n\025point_num_dist_weight\030\005 \001(\002"
      ":\0010\022 \n\025histogram_dist_weight\030\006 \001(\002:\0010\022%\n"
      "\032centroid_shift_dist_weight\030\007 \001(\002:\0010\022\037\n\024"
      "bbox_iou_dist_weight\030\010 \001(\002:\0010\"\243\001\n\021MlfDis"
      "tanceConfig\022F\n\022foreground_weights\030\001 \003(\0132"
      "*.apollo.perception.lidar.MlfDistanceWei"
      "ght\022F\n\022background_weights\030\002 \003(\0132*.apollo"
      ".perception.lidar.MlfDistanceWeight\"\324\001\n\033"
      "MlfTrackObjectMatcherConfig\022\?\n\031foregroun"
      "d_mathcer_method\030\001 \001(\t:\034MultiHmBipartite"
      "GraphMatcher\022;\n\031background_matcher_metho"
      "d\030\002 \001(\t:\030GnnBipartiteGraphMatcher\022\030\n\013bou"
      "nd_value\030\003 \001(\002:\003100\022\035\n\022max_match_distanc"
      "e\030\004 \001(\002:\0014\"\'\n\020MlfTrackerConfig\022\023\n\013filter"
      "_name\030\001 \003(\t\"\322\003\n\025MlfMotionFilterConfig\022\032\n"
      "\014use_adaptive\030\001 \001(\010:\004true\022\033\n\ruse_breakdo"
      "wn\030\002 \001(\010:\004true\022%\n\027use_convergence_boostu"
      "p\030\003 \001(\010:\004true\022!\n\026init_velocity_variance\030"
      "\004 \001(\001:\0015\022&\n\032init_acceleration_variance\030\005"
      " \001(\001:\00210\022\'\n\032measured_velocity_variance\030\006"
      " \001(\001:\0030.4\022\'\n\033predict_variance_per_sqrsec"
      "\030\007 \001(\001:\00210\022\'\n\034boostup_history_size_minim"
      "um\030\010 \001(\r:\0013\022\'\n\034boostup_history_size_maxi"
      "mum\030\t \001(\r:\0016\022)\n\034converged_confidence_min"
      "imum\030\n \001(\001:\0030.5\022\032\n\rnoise_maximum\030\014 \001(\001:\003"
      "0.1\022#\n\027trust_orientation_range\030\r \001(\001:\00240"
      "\"h\n\026MlfMotionRefinerConfig\022*\n\036claping_ac"
      "celeration_threshold\030\001 \001(\001:\00210\022\"\n\027clapin"
      "g_speed_threshold\030\002 \001(\001:\0011\"m\n\024MlfShapeFi"
      "lterConfig\022+\n\036bottom_points_ignore_thres"
      "hold\030\001 \001(\001:\0030.1\022(\n\033top_points_ignore_thr"
      "eshold\030\002 \001(\001:\0031.6\"\336\001\n\017MlfEngineConfig\022\023\n"
      "\013main_sensor\030\001 \003(\t\022%\n\027use_histogram_for_"
      "match\030\002 \001(\010:\004true\022\036\n\022histogram_bin_size\030"
      "\003 \001(\r:\00210\022%\n\026output_predict_objects\030\004 \001("
      "\010:\005false\022$\n\027reserved_invisible_time\030\005 \001("
      "\001:\0030.2\022\"\n\023use_frame_timestamp\030\006 \001(\010:\005fal"
      "se"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1682);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "multi_lidar_fusion_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_multi_5flidar_5ffusion_5fconfig_2eproto
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void MlfDistanceWeight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfDistanceWeight::kSensorNamePairFieldNumber;
const int MlfDistanceWeight::kLocationDistWeightFieldNumber;
const int MlfDistanceWeight::kDirectionDistWeightFieldNumber;
const int MlfDistanceWeight::kBboxSizeDistWeightFieldNumber;
const int MlfDistanceWeight::kPointNumDistWeightFieldNumber;
const int MlfDistanceWeight::kHistogramDistWeightFieldNumber;
const int MlfDistanceWeight::kCentroidShiftDistWeightFieldNumber;
const int MlfDistanceWeight::kBboxIouDistWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfDistanceWeight::MlfDistanceWeight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfDistanceWeight.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfDistanceWeight)
}
MlfDistanceWeight::MlfDistanceWeight(const MlfDistanceWeight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_name_pair_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor_name_pair()) {
    sensor_name_pair_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_name_pair_);
  }
  ::memcpy(&location_dist_weight_, &from.location_dist_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&bbox_iou_dist_weight_) -
    reinterpret_cast<char*>(&location_dist_weight_)) + sizeof(bbox_iou_dist_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfDistanceWeight)
}

void MlfDistanceWeight::SharedCtor() {
  sensor_name_pair_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_dist_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bbox_iou_dist_weight_) -
      reinterpret_cast<char*>(&location_dist_weight_)) + sizeof(bbox_iou_dist_weight_));
}

MlfDistanceWeight::~MlfDistanceWeight() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfDistanceWeight)
  SharedDtor();
}

void MlfDistanceWeight::SharedDtor() {
  sensor_name_pair_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MlfDistanceWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfDistanceWeight::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfDistanceWeight& MlfDistanceWeight::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfDistanceWeight.base);
  return *internal_default_instance();
}


void MlfDistanceWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfDistanceWeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sensor_name_pair_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&location_dist_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bbox_iou_dist_weight_) -
        reinterpret_cast<char*>(&location_dist_weight_)) + sizeof(bbox_iou_dist_weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfDistanceWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfDistanceWeight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensor_name_pair = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_name_pair()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_name_pair().data(), static_cast<int>(this->sensor_name_pair().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lidar.MlfDistanceWeight.sensor_name_pair");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float location_dist_weight = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_location_dist_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_dist_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float direction_dist_weight = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_direction_dist_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_dist_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bbox_size_dist_weight = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_bbox_size_dist_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_size_dist_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float point_num_dist_weight = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_point_num_dist_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &point_num_dist_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float histogram_dist_weight = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_histogram_dist_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &histogram_dist_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float centroid_shift_dist_weight = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_centroid_shift_dist_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centroid_shift_dist_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bbox_iou_dist_weight = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_bbox_iou_dist_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_iou_dist_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfDistanceWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfDistanceWeight)
  return false;
#undef DO_
}

void MlfDistanceWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfDistanceWeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name_pair = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name_pair().data(), static_cast<int>(this->sensor_name_pair().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfDistanceWeight.sensor_name_pair");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_name_pair(), output);
  }

  // optional float location_dist_weight = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->location_dist_weight(), output);
  }

  // optional float direction_dist_weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->direction_dist_weight(), output);
  }

  // optional float bbox_size_dist_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bbox_size_dist_weight(), output);
  }

  // optional float point_num_dist_weight = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->point_num_dist_weight(), output);
  }

  // optional float histogram_dist_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->histogram_dist_weight(), output);
  }

  // optional float centroid_shift_dist_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->centroid_shift_dist_weight(), output);
  }

  // optional float bbox_iou_dist_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bbox_iou_dist_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfDistanceWeight)
}

::google::protobuf::uint8* MlfDistanceWeight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfDistanceWeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name_pair = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name_pair().data(), static_cast<int>(this->sensor_name_pair().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfDistanceWeight.sensor_name_pair");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_name_pair(), target);
  }

  // optional float location_dist_weight = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->location_dist_weight(), target);
  }

  // optional float direction_dist_weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->direction_dist_weight(), target);
  }

  // optional float bbox_size_dist_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bbox_size_dist_weight(), target);
  }

  // optional float point_num_dist_weight = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->point_num_dist_weight(), target);
  }

  // optional float histogram_dist_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->histogram_dist_weight(), target);
  }

  // optional float centroid_shift_dist_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->centroid_shift_dist_weight(), target);
  }

  // optional float bbox_iou_dist_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bbox_iou_dist_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfDistanceWeight)
  return target;
}

size_t MlfDistanceWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfDistanceWeight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string sensor_name_pair = 1 [default = ""];
    if (has_sensor_name_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_name_pair());
    }

    // optional float location_dist_weight = 2 [default = 0];
    if (has_location_dist_weight()) {
      total_size += 1 + 4;
    }

    // optional float direction_dist_weight = 3 [default = 0];
    if (has_direction_dist_weight()) {
      total_size += 1 + 4;
    }

    // optional float bbox_size_dist_weight = 4 [default = 0];
    if (has_bbox_size_dist_weight()) {
      total_size += 1 + 4;
    }

    // optional float point_num_dist_weight = 5 [default = 0];
    if (has_point_num_dist_weight()) {
      total_size += 1 + 4;
    }

    // optional float histogram_dist_weight = 6 [default = 0];
    if (has_histogram_dist_weight()) {
      total_size += 1 + 4;
    }

    // optional float centroid_shift_dist_weight = 7 [default = 0];
    if (has_centroid_shift_dist_weight()) {
      total_size += 1 + 4;
    }

    // optional float bbox_iou_dist_weight = 8 [default = 0];
    if (has_bbox_iou_dist_weight()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfDistanceWeight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfDistanceWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfDistanceWeight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfDistanceWeight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfDistanceWeight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfDistanceWeight)
    MergeFrom(*source);
  }
}

void MlfDistanceWeight::MergeFrom(const MlfDistanceWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfDistanceWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sensor_name_pair();
      sensor_name_pair_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_name_pair_);
    }
    if (cached_has_bits & 0x00000002u) {
      location_dist_weight_ = from.location_dist_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_dist_weight_ = from.direction_dist_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      bbox_size_dist_weight_ = from.bbox_size_dist_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      point_num_dist_weight_ = from.point_num_dist_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      histogram_dist_weight_ = from.histogram_dist_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      centroid_shift_dist_weight_ = from.centroid_shift_dist_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      bbox_iou_dist_weight_ = from.bbox_iou_dist_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfDistanceWeight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfDistanceWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfDistanceWeight::CopyFrom(const MlfDistanceWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfDistanceWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfDistanceWeight::IsInitialized() const {
  return true;
}

void MlfDistanceWeight::Swap(MlfDistanceWeight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfDistanceWeight::InternalSwap(MlfDistanceWeight* other) {
  using std::swap;
  sensor_name_pair_.Swap(&other->sensor_name_pair_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_dist_weight_, other->location_dist_weight_);
  swap(direction_dist_weight_, other->direction_dist_weight_);
  swap(bbox_size_dist_weight_, other->bbox_size_dist_weight_);
  swap(point_num_dist_weight_, other->point_num_dist_weight_);
  swap(histogram_dist_weight_, other->histogram_dist_weight_);
  swap(centroid_shift_dist_weight_, other->centroid_shift_dist_weight_);
  swap(bbox_iou_dist_weight_, other->bbox_iou_dist_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfDistanceWeight::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MlfDistanceConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfDistanceConfig::kForegroundWeightsFieldNumber;
const int MlfDistanceConfig::kBackgroundWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfDistanceConfig::MlfDistanceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfDistanceConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfDistanceConfig)
}
MlfDistanceConfig::MlfDistanceConfig(const MlfDistanceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      foreground_weights_(from.foreground_weights_),
      background_weights_(from.background_weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfDistanceConfig)
}

void MlfDistanceConfig::SharedCtor() {
}

MlfDistanceConfig::~MlfDistanceConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfDistanceConfig)
  SharedDtor();
}

void MlfDistanceConfig::SharedDtor() {
}

void MlfDistanceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfDistanceConfig::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfDistanceConfig& MlfDistanceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfDistanceConfig.base);
  return *internal_default_instance();
}


void MlfDistanceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfDistanceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foreground_weights_.Clear();
  background_weights_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfDistanceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfDistanceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_foreground_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_background_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfDistanceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfDistanceConfig)
  return false;
#undef DO_
}

void MlfDistanceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfDistanceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->foreground_weights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->foreground_weights(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->background_weights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->background_weights(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfDistanceConfig)
}

::google::protobuf::uint8* MlfDistanceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfDistanceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->foreground_weights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->foreground_weights(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->background_weights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->background_weights(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfDistanceConfig)
  return target;
}

size_t MlfDistanceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfDistanceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->foreground_weights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->foreground_weights(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->background_weights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->background_weights(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfDistanceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfDistanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfDistanceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfDistanceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfDistanceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfDistanceConfig)
    MergeFrom(*source);
  }
}

void MlfDistanceConfig::MergeFrom(const MlfDistanceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfDistanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  foreground_weights_.MergeFrom(from.foreground_weights_);
  background_weights_.MergeFrom(from.background_weights_);
}

void MlfDistanceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfDistanceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfDistanceConfig::CopyFrom(const MlfDistanceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfDistanceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfDistanceConfig::IsInitialized() const {
  return true;
}

void MlfDistanceConfig::Swap(MlfDistanceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfDistanceConfig::InternalSwap(MlfDistanceConfig* other) {
  using std::swap;
  CastToBase(&foreground_weights_)->InternalSwap(CastToBase(&other->foreground_weights_));
  CastToBase(&background_weights_)->InternalSwap(CastToBase(&other->background_weights_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfDistanceConfig::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MlfTrackObjectMatcherConfig::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfTrackObjectMatcherConfig::kForegroundMathcerMethodFieldNumber;
const int MlfTrackObjectMatcherConfig::kBackgroundMatcherMethodFieldNumber;
const int MlfTrackObjectMatcherConfig::kBoundValueFieldNumber;
const int MlfTrackObjectMatcherConfig::kMaxMatchDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfTrackObjectMatcherConfig::MlfTrackObjectMatcherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfTrackObjectMatcherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
}
MlfTrackObjectMatcherConfig::MlfTrackObjectMatcherConfig(const MlfTrackObjectMatcherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foreground_mathcer_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  if (from.has_foreground_mathcer_method()) {
    foreground_mathcer_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(), from.foreground_mathcer_method_);
  }
  background_matcher_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
  if (from.has_background_matcher_method()) {
    background_matcher_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(), from.background_matcher_method_);
  }
  ::memcpy(&bound_value_, &from.bound_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_match_distance_) -
    reinterpret_cast<char*>(&bound_value_)) + sizeof(max_match_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
}

void MlfTrackObjectMatcherConfig::SharedCtor() {
  foreground_mathcer_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  background_matcher_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
  bound_value_ = 100;
  max_match_distance_ = 4;
}

MlfTrackObjectMatcherConfig::~MlfTrackObjectMatcherConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  SharedDtor();
}

void MlfTrackObjectMatcherConfig::SharedDtor() {
  foreground_mathcer_method_.DestroyNoArena(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  background_matcher_method_.DestroyNoArena(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
}

void MlfTrackObjectMatcherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfTrackObjectMatcherConfig::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfTrackObjectMatcherConfig& MlfTrackObjectMatcherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfTrackObjectMatcherConfig.base);
  return *internal_default_instance();
}


void MlfTrackObjectMatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      foreground_mathcer_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      background_matcher_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
    }
    bound_value_ = 100;
    max_match_distance_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfTrackObjectMatcherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foreground_mathcer_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->foreground_mathcer_method().data(), static_cast<int>(this->foreground_mathcer_method().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lidar.MlfTrackObjectMatcherConfig.foreground_mathcer_method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_background_matcher_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->background_matcher_method().data(), static_cast<int>(this->background_matcher_method().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lidar.MlfTrackObjectMatcherConfig.background_matcher_method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bound_value = 3 [default = 100];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_bound_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bound_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_match_distance = 4 [default = 4];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_max_match_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_match_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  return false;
#undef DO_
}

void MlfTrackObjectMatcherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->foreground_mathcer_method().data(), static_cast<int>(this->foreground_mathcer_method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.foreground_mathcer_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->foreground_mathcer_method(), output);
  }

  // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->background_matcher_method().data(), static_cast<int>(this->background_matcher_method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.background_matcher_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->background_matcher_method(), output);
  }

  // optional float bound_value = 3 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bound_value(), output);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_match_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
}

::google::protobuf::uint8* MlfTrackObjectMatcherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->foreground_mathcer_method().data(), static_cast<int>(this->foreground_mathcer_method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.foreground_mathcer_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->foreground_mathcer_method(), target);
  }

  // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->background_matcher_method().data(), static_cast<int>(this->background_matcher_method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.background_matcher_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->background_matcher_method(), target);
  }

  // optional float bound_value = 3 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bound_value(), target);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_match_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  return target;
}

size_t MlfTrackObjectMatcherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
    if (has_foreground_mathcer_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->foreground_mathcer_method());
    }

    // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
    if (has_background_matcher_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->background_matcher_method());
    }

    // optional float bound_value = 3 [default = 100];
    if (has_bound_value()) {
      total_size += 1 + 4;
    }

    // optional float max_match_distance = 4 [default = 4];
    if (has_max_match_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfTrackObjectMatcherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfTrackObjectMatcherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfTrackObjectMatcherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
    MergeFrom(*source);
  }
}

void MlfTrackObjectMatcherConfig::MergeFrom(const MlfTrackObjectMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_foreground_mathcer_method();
      foreground_mathcer_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(), from.foreground_mathcer_method_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_background_matcher_method();
      background_matcher_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(), from.background_matcher_method_);
    }
    if (cached_has_bits & 0x00000004u) {
      bound_value_ = from.bound_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_match_distance_ = from.max_match_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfTrackObjectMatcherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfTrackObjectMatcherConfig::CopyFrom(const MlfTrackObjectMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfTrackObjectMatcherConfig::IsInitialized() const {
  return true;
}

void MlfTrackObjectMatcherConfig::Swap(MlfTrackObjectMatcherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfTrackObjectMatcherConfig::InternalSwap(MlfTrackObjectMatcherConfig* other) {
  using std::swap;
  foreground_mathcer_method_.Swap(&other->foreground_mathcer_method_, &::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(),
    GetArenaNoVirtual());
  background_matcher_method_.Swap(&other->background_matcher_method_, &::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(),
    GetArenaNoVirtual());
  swap(bound_value_, other->bound_value_);
  swap(max_match_distance_, other->max_match_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfTrackObjectMatcherConfig::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MlfTrackerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfTrackerConfig::kFilterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfTrackerConfig::MlfTrackerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfTrackerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfTrackerConfig)
}
MlfTrackerConfig::MlfTrackerConfig(const MlfTrackerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      filter_name_(from.filter_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfTrackerConfig)
}

void MlfTrackerConfig::SharedCtor() {
}

MlfTrackerConfig::~MlfTrackerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfTrackerConfig)
  SharedDtor();
}

void MlfTrackerConfig::SharedDtor() {
}

void MlfTrackerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfTrackerConfig::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfTrackerConfig& MlfTrackerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfTrackerConfig.base);
  return *internal_default_instance();
}


void MlfTrackerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfTrackerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfTrackerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfTrackerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string filter_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter_name(this->filter_name_size() - 1).data(),
            static_cast<int>(this->filter_name(this->filter_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lidar.MlfTrackerConfig.filter_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfTrackerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfTrackerConfig)
  return false;
#undef DO_
}

void MlfTrackerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfTrackerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filter_name = 1;
  for (int i = 0, n = this->filter_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter_name(i).data(), static_cast<int>(this->filter_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackerConfig.filter_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filter_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfTrackerConfig)
}

::google::protobuf::uint8* MlfTrackerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfTrackerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filter_name = 1;
  for (int i = 0, n = this->filter_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter_name(i).data(), static_cast<int>(this->filter_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackerConfig.filter_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->filter_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfTrackerConfig)
  return target;
}

size_t MlfTrackerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfTrackerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string filter_name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filter_name_size());
  for (int i = 0, n = this->filter_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter_name(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfTrackerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfTrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfTrackerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfTrackerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfTrackerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfTrackerConfig)
    MergeFrom(*source);
  }
}

void MlfTrackerConfig::MergeFrom(const MlfTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfTrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_name_.MergeFrom(from.filter_name_);
}

void MlfTrackerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfTrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfTrackerConfig::CopyFrom(const MlfTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfTrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfTrackerConfig::IsInitialized() const {
  return true;
}

void MlfTrackerConfig::Swap(MlfTrackerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfTrackerConfig::InternalSwap(MlfTrackerConfig* other) {
  using std::swap;
  filter_name_.InternalSwap(CastToBase(&other->filter_name_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfTrackerConfig::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MlfMotionFilterConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfMotionFilterConfig::kUseAdaptiveFieldNumber;
const int MlfMotionFilterConfig::kUseBreakdownFieldNumber;
const int MlfMotionFilterConfig::kUseConvergenceBoostupFieldNumber;
const int MlfMotionFilterConfig::kInitVelocityVarianceFieldNumber;
const int MlfMotionFilterConfig::kInitAccelerationVarianceFieldNumber;
const int MlfMotionFilterConfig::kMeasuredVelocityVarianceFieldNumber;
const int MlfMotionFilterConfig::kPredictVariancePerSqrsecFieldNumber;
const int MlfMotionFilterConfig::kBoostupHistorySizeMinimumFieldNumber;
const int MlfMotionFilterConfig::kBoostupHistorySizeMaximumFieldNumber;
const int MlfMotionFilterConfig::kConvergedConfidenceMinimumFieldNumber;
const int MlfMotionFilterConfig::kNoiseMaximumFieldNumber;
const int MlfMotionFilterConfig::kTrustOrientationRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfMotionFilterConfig::MlfMotionFilterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfMotionFilterConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfMotionFilterConfig)
}
MlfMotionFilterConfig::MlfMotionFilterConfig(const MlfMotionFilterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boostup_history_size_maximum_, &from.boostup_history_size_maximum_,
    static_cast<size_t>(reinterpret_cast<char*>(&trust_orientation_range_) -
    reinterpret_cast<char*>(&boostup_history_size_maximum_)) + sizeof(trust_orientation_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfMotionFilterConfig)
}

void MlfMotionFilterConfig::SharedCtor() {
  boostup_history_size_maximum_ = 6u;
  use_adaptive_ = true;
  use_breakdown_ = true;
  use_convergence_boostup_ = true;
  boostup_history_size_minimum_ = 3u;
  init_velocity_variance_ = 5;
  init_acceleration_variance_ = 10;
  measured_velocity_variance_ = 0.4;
  predict_variance_per_sqrsec_ = 10;
  converged_confidence_minimum_ = 0.5;
  noise_maximum_ = 0.1;
  trust_orientation_range_ = 40;
}

MlfMotionFilterConfig::~MlfMotionFilterConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfMotionFilterConfig)
  SharedDtor();
}

void MlfMotionFilterConfig::SharedDtor() {
}

void MlfMotionFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfMotionFilterConfig::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfMotionFilterConfig& MlfMotionFilterConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfMotionFilterConfig.base);
  return *internal_default_instance();
}


void MlfMotionFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfMotionFilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    boostup_history_size_maximum_ = 6u;
    use_adaptive_ = true;
    use_breakdown_ = true;
    use_convergence_boostup_ = true;
    boostup_history_size_minimum_ = 3u;
    init_velocity_variance_ = 5;
    init_acceleration_variance_ = 10;
    measured_velocity_variance_ = 0.4;
  }
  if (cached_has_bits & 3840u) {
    predict_variance_per_sqrsec_ = 10;
    converged_confidence_minimum_ = 0.5;
    noise_maximum_ = 0.1;
    trust_orientation_range_ = 40;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfMotionFilterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfMotionFilterConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_adaptive = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_adaptive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_adaptive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_breakdown = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_use_breakdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_breakdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_convergence_boostup = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_use_convergence_boostup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_convergence_boostup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_velocity_variance = 4 [default = 5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_init_velocity_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_velocity_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_acceleration_variance = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_init_acceleration_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_acceleration_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measured_velocity_variance = 6 [default = 0.4];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_measured_velocity_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measured_velocity_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double predict_variance_per_sqrsec = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_predict_variance_per_sqrsec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predict_variance_per_sqrsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 boostup_history_size_minimum = 8 [default = 3];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_boostup_history_size_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boostup_history_size_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 boostup_history_size_maximum = 9 [default = 6];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_boostup_history_size_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boostup_history_size_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double converged_confidence_minimum = 10 [default = 0.5];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_converged_confidence_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &converged_confidence_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double noise_maximum = 12 [default = 0.1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_noise_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &noise_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trust_orientation_range = 13 [default = 40];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_trust_orientation_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trust_orientation_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfMotionFilterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfMotionFilterConfig)
  return false;
#undef DO_
}

void MlfMotionFilterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfMotionFilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_adaptive = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_adaptive(), output);
  }

  // optional bool use_breakdown = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_breakdown(), output);
  }

  // optional bool use_convergence_boostup = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_convergence_boostup(), output);
  }

  // optional double init_velocity_variance = 4 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->init_velocity_variance(), output);
  }

  // optional double init_acceleration_variance = 5 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->init_acceleration_variance(), output);
  }

  // optional double measured_velocity_variance = 6 [default = 0.4];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->measured_velocity_variance(), output);
  }

  // optional double predict_variance_per_sqrsec = 7 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->predict_variance_per_sqrsec(), output);
  }

  // optional uint32 boostup_history_size_minimum = 8 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->boostup_history_size_minimum(), output);
  }

  // optional uint32 boostup_history_size_maximum = 9 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->boostup_history_size_maximum(), output);
  }

  // optional double converged_confidence_minimum = 10 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->converged_confidence_minimum(), output);
  }

  // optional double noise_maximum = 12 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->noise_maximum(), output);
  }

  // optional double trust_orientation_range = 13 [default = 40];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->trust_orientation_range(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfMotionFilterConfig)
}

::google::protobuf::uint8* MlfMotionFilterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfMotionFilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_adaptive = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_adaptive(), target);
  }

  // optional bool use_breakdown = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_breakdown(), target);
  }

  // optional bool use_convergence_boostup = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_convergence_boostup(), target);
  }

  // optional double init_velocity_variance = 4 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->init_velocity_variance(), target);
  }

  // optional double init_acceleration_variance = 5 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->init_acceleration_variance(), target);
  }

  // optional double measured_velocity_variance = 6 [default = 0.4];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->measured_velocity_variance(), target);
  }

  // optional double predict_variance_per_sqrsec = 7 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->predict_variance_per_sqrsec(), target);
  }

  // optional uint32 boostup_history_size_minimum = 8 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->boostup_history_size_minimum(), target);
  }

  // optional uint32 boostup_history_size_maximum = 9 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->boostup_history_size_maximum(), target);
  }

  // optional double converged_confidence_minimum = 10 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->converged_confidence_minimum(), target);
  }

  // optional double noise_maximum = 12 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->noise_maximum(), target);
  }

  // optional double trust_orientation_range = 13 [default = 40];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->trust_orientation_range(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfMotionFilterConfig)
  return target;
}

size_t MlfMotionFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfMotionFilterConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 boostup_history_size_maximum = 9 [default = 6];
    if (has_boostup_history_size_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boostup_history_size_maximum());
    }

    // optional bool use_adaptive = 1 [default = true];
    if (has_use_adaptive()) {
      total_size += 1 + 1;
    }

    // optional bool use_breakdown = 2 [default = true];
    if (has_use_breakdown()) {
      total_size += 1 + 1;
    }

    // optional bool use_convergence_boostup = 3 [default = true];
    if (has_use_convergence_boostup()) {
      total_size += 1 + 1;
    }

    // optional uint32 boostup_history_size_minimum = 8 [default = 3];
    if (has_boostup_history_size_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boostup_history_size_minimum());
    }

    // optional double init_velocity_variance = 4 [default = 5];
    if (has_init_velocity_variance()) {
      total_size += 1 + 8;
    }

    // optional double init_acceleration_variance = 5 [default = 10];
    if (has_init_acceleration_variance()) {
      total_size += 1 + 8;
    }

    // optional double measured_velocity_variance = 6 [default = 0.4];
    if (has_measured_velocity_variance()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double predict_variance_per_sqrsec = 7 [default = 10];
    if (has_predict_variance_per_sqrsec()) {
      total_size += 1 + 8;
    }

    // optional double converged_confidence_minimum = 10 [default = 0.5];
    if (has_converged_confidence_minimum()) {
      total_size += 1 + 8;
    }

    // optional double noise_maximum = 12 [default = 0.1];
    if (has_noise_maximum()) {
      total_size += 1 + 8;
    }

    // optional double trust_orientation_range = 13 [default = 40];
    if (has_trust_orientation_range()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfMotionFilterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfMotionFilterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfMotionFilterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfMotionFilterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfMotionFilterConfig)
    MergeFrom(*source);
  }
}

void MlfMotionFilterConfig::MergeFrom(const MlfMotionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      boostup_history_size_maximum_ = from.boostup_history_size_maximum_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_adaptive_ = from.use_adaptive_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_breakdown_ = from.use_breakdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_convergence_boostup_ = from.use_convergence_boostup_;
    }
    if (cached_has_bits & 0x00000010u) {
      boostup_history_size_minimum_ = from.boostup_history_size_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      init_velocity_variance_ = from.init_velocity_variance_;
    }
    if (cached_has_bits & 0x00000040u) {
      init_acceleration_variance_ = from.init_acceleration_variance_;
    }
    if (cached_has_bits & 0x00000080u) {
      measured_velocity_variance_ = from.measured_velocity_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      predict_variance_per_sqrsec_ = from.predict_variance_per_sqrsec_;
    }
    if (cached_has_bits & 0x00000200u) {
      converged_confidence_minimum_ = from.converged_confidence_minimum_;
    }
    if (cached_has_bits & 0x00000400u) {
      noise_maximum_ = from.noise_maximum_;
    }
    if (cached_has_bits & 0x00000800u) {
      trust_orientation_range_ = from.trust_orientation_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfMotionFilterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfMotionFilterConfig::CopyFrom(const MlfMotionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfMotionFilterConfig::IsInitialized() const {
  return true;
}

void MlfMotionFilterConfig::Swap(MlfMotionFilterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfMotionFilterConfig::InternalSwap(MlfMotionFilterConfig* other) {
  using std::swap;
  swap(boostup_history_size_maximum_, other->boostup_history_size_maximum_);
  swap(use_adaptive_, other->use_adaptive_);
  swap(use_breakdown_, other->use_breakdown_);
  swap(use_convergence_boostup_, other->use_convergence_boostup_);
  swap(boostup_history_size_minimum_, other->boostup_history_size_minimum_);
  swap(init_velocity_variance_, other->init_velocity_variance_);
  swap(init_acceleration_variance_, other->init_acceleration_variance_);
  swap(measured_velocity_variance_, other->measured_velocity_variance_);
  swap(predict_variance_per_sqrsec_, other->predict_variance_per_sqrsec_);
  swap(converged_confidence_minimum_, other->converged_confidence_minimum_);
  swap(noise_maximum_, other->noise_maximum_);
  swap(trust_orientation_range_, other->trust_orientation_range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfMotionFilterConfig::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MlfMotionRefinerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfMotionRefinerConfig::kClapingAccelerationThresholdFieldNumber;
const int MlfMotionRefinerConfig::kClapingSpeedThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfMotionRefinerConfig::MlfMotionRefinerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfMotionRefinerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfMotionRefinerConfig)
}
MlfMotionRefinerConfig::MlfMotionRefinerConfig(const MlfMotionRefinerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&claping_acceleration_threshold_, &from.claping_acceleration_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&claping_speed_threshold_) -
    reinterpret_cast<char*>(&claping_acceleration_threshold_)) + sizeof(claping_speed_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfMotionRefinerConfig)
}

void MlfMotionRefinerConfig::SharedCtor() {
  claping_acceleration_threshold_ = 10;
  claping_speed_threshold_ = 1;
}

MlfMotionRefinerConfig::~MlfMotionRefinerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfMotionRefinerConfig)
  SharedDtor();
}

void MlfMotionRefinerConfig::SharedDtor() {
}

void MlfMotionRefinerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfMotionRefinerConfig::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfMotionRefinerConfig& MlfMotionRefinerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfMotionRefinerConfig.base);
  return *internal_default_instance();
}


void MlfMotionRefinerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    claping_acceleration_threshold_ = 10;
    claping_speed_threshold_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfMotionRefinerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double claping_acceleration_threshold = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_claping_acceleration_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &claping_acceleration_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double claping_speed_threshold = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_claping_speed_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &claping_speed_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfMotionRefinerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfMotionRefinerConfig)
  return false;
#undef DO_
}

void MlfMotionRefinerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double claping_acceleration_threshold = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->claping_acceleration_threshold(), output);
  }

  // optional double claping_speed_threshold = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->claping_speed_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfMotionRefinerConfig)
}

::google::protobuf::uint8* MlfMotionRefinerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double claping_acceleration_threshold = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->claping_acceleration_threshold(), target);
  }

  // optional double claping_speed_threshold = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->claping_speed_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfMotionRefinerConfig)
  return target;
}

size_t MlfMotionRefinerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double claping_acceleration_threshold = 1 [default = 10];
    if (has_claping_acceleration_threshold()) {
      total_size += 1 + 8;
    }

    // optional double claping_speed_threshold = 2 [default = 1];
    if (has_claping_speed_threshold()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfMotionRefinerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfMotionRefinerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfMotionRefinerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfMotionRefinerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfMotionRefinerConfig)
    MergeFrom(*source);
  }
}

void MlfMotionRefinerConfig::MergeFrom(const MlfMotionRefinerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      claping_acceleration_threshold_ = from.claping_acceleration_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      claping_speed_threshold_ = from.claping_speed_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfMotionRefinerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfMotionRefinerConfig::CopyFrom(const MlfMotionRefinerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfMotionRefinerConfig::IsInitialized() const {
  return true;
}

void MlfMotionRefinerConfig::Swap(MlfMotionRefinerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfMotionRefinerConfig::InternalSwap(MlfMotionRefinerConfig* other) {
  using std::swap;
  swap(claping_acceleration_threshold_, other->claping_acceleration_threshold_);
  swap(claping_speed_threshold_, other->claping_speed_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfMotionRefinerConfig::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MlfShapeFilterConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfShapeFilterConfig::kBottomPointsIgnoreThresholdFieldNumber;
const int MlfShapeFilterConfig::kTopPointsIgnoreThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfShapeFilterConfig::MlfShapeFilterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfShapeFilterConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfShapeFilterConfig)
}
MlfShapeFilterConfig::MlfShapeFilterConfig(const MlfShapeFilterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bottom_points_ignore_threshold_, &from.bottom_points_ignore_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_points_ignore_threshold_) -
    reinterpret_cast<char*>(&bottom_points_ignore_threshold_)) + sizeof(top_points_ignore_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfShapeFilterConfig)
}

void MlfShapeFilterConfig::SharedCtor() {
  bottom_points_ignore_threshold_ = 0.1;
  top_points_ignore_threshold_ = 1.6;
}

MlfShapeFilterConfig::~MlfShapeFilterConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfShapeFilterConfig)
  SharedDtor();
}

void MlfShapeFilterConfig::SharedDtor() {
}

void MlfShapeFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfShapeFilterConfig::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfShapeFilterConfig& MlfShapeFilterConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfShapeFilterConfig.base);
  return *internal_default_instance();
}


void MlfShapeFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfShapeFilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    bottom_points_ignore_threshold_ = 0.1;
    top_points_ignore_threshold_ = 1.6;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfShapeFilterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfShapeFilterConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_bottom_points_ignore_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottom_points_ignore_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double top_points_ignore_threshold = 2 [default = 1.6];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_top_points_ignore_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top_points_ignore_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfShapeFilterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfShapeFilterConfig)
  return false;
#undef DO_
}

void MlfShapeFilterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfShapeFilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->bottom_points_ignore_threshold(), output);
  }

  // optional double top_points_ignore_threshold = 2 [default = 1.6];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->top_points_ignore_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfShapeFilterConfig)
}

::google::protobuf::uint8* MlfShapeFilterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfShapeFilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->bottom_points_ignore_threshold(), target);
  }

  // optional double top_points_ignore_threshold = 2 [default = 1.6];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->top_points_ignore_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfShapeFilterConfig)
  return target;
}

size_t MlfShapeFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfShapeFilterConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
    if (has_bottom_points_ignore_threshold()) {
      total_size += 1 + 8;
    }

    // optional double top_points_ignore_threshold = 2 [default = 1.6];
    if (has_top_points_ignore_threshold()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfShapeFilterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfShapeFilterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfShapeFilterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfShapeFilterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfShapeFilterConfig)
    MergeFrom(*source);
  }
}

void MlfShapeFilterConfig::MergeFrom(const MlfShapeFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bottom_points_ignore_threshold_ = from.bottom_points_ignore_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_points_ignore_threshold_ = from.top_points_ignore_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfShapeFilterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfShapeFilterConfig::CopyFrom(const MlfShapeFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfShapeFilterConfig::IsInitialized() const {
  return true;
}

void MlfShapeFilterConfig::Swap(MlfShapeFilterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfShapeFilterConfig::InternalSwap(MlfShapeFilterConfig* other) {
  using std::swap;
  swap(bottom_points_ignore_threshold_, other->bottom_points_ignore_threshold_);
  swap(top_points_ignore_threshold_, other->top_points_ignore_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfShapeFilterConfig::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MlfEngineConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MlfEngineConfig::kMainSensorFieldNumber;
const int MlfEngineConfig::kUseHistogramForMatchFieldNumber;
const int MlfEngineConfig::kHistogramBinSizeFieldNumber;
const int MlfEngineConfig::kOutputPredictObjectsFieldNumber;
const int MlfEngineConfig::kReservedInvisibleTimeFieldNumber;
const int MlfEngineConfig::kUseFrameTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MlfEngineConfig::MlfEngineConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfEngineConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfEngineConfig)
}
MlfEngineConfig::MlfEngineConfig(const MlfEngineConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      main_sensor_(from.main_sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_predict_objects_, &from.output_predict_objects_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_invisible_time_) -
    reinterpret_cast<char*>(&output_predict_objects_)) + sizeof(reserved_invisible_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfEngineConfig)
}

void MlfEngineConfig::SharedCtor() {
  ::memset(&output_predict_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_frame_timestamp_) -
      reinterpret_cast<char*>(&output_predict_objects_)) + sizeof(use_frame_timestamp_));
  use_histogram_for_match_ = true;
  histogram_bin_size_ = 10u;
  reserved_invisible_time_ = 0.2;
}

MlfEngineConfig::~MlfEngineConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfEngineConfig)
  SharedDtor();
}

void MlfEngineConfig::SharedDtor() {
}

void MlfEngineConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MlfEngineConfig::descriptor() {
  ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MlfEngineConfig& MlfEngineConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::scc_info_MlfEngineConfig.base);
  return *internal_default_instance();
}


void MlfEngineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfEngineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_sensor_.Clear();
  ::memset(&output_predict_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_frame_timestamp_) -
      reinterpret_cast<char*>(&output_predict_objects_)) + sizeof(use_frame_timestamp_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 28u) {
    use_histogram_for_match_ = true;
    histogram_bin_size_ = 10u;
    reserved_invisible_time_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MlfEngineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MlfEngineConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string main_sensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_main_sensor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->main_sensor(this->main_sensor_size() - 1).data(),
            static_cast<int>(this->main_sensor(this->main_sensor_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.lidar.MlfEngineConfig.main_sensor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_histogram_for_match = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_use_histogram_for_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_histogram_for_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 histogram_bin_size = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_histogram_bin_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &histogram_bin_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool output_predict_objects = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_output_predict_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_predict_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reserved_invisible_time = 5 [default = 0.2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_reserved_invisible_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserved_invisible_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_frame_timestamp = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_use_frame_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_frame_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MlfEngineConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MlfEngineConfig)
  return false;
#undef DO_
}

void MlfEngineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MlfEngineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string main_sensor = 1;
  for (int i = 0, n = this->main_sensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_sensor(i).data(), static_cast<int>(this->main_sensor(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfEngineConfig.main_sensor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->main_sensor(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_histogram_for_match = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_histogram_for_match(), output);
  }

  // optional uint32 histogram_bin_size = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->histogram_bin_size(), output);
  }

  // optional bool output_predict_objects = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->output_predict_objects(), output);
  }

  // optional double reserved_invisible_time = 5 [default = 0.2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->reserved_invisible_time(), output);
  }

  // optional bool use_frame_timestamp = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_frame_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MlfEngineConfig)
}

::google::protobuf::uint8* MlfEngineConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfEngineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string main_sensor = 1;
  for (int i = 0, n = this->main_sensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_sensor(i).data(), static_cast<int>(this->main_sensor(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfEngineConfig.main_sensor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->main_sensor(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_histogram_for_match = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_histogram_for_match(), target);
  }

  // optional uint32 histogram_bin_size = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->histogram_bin_size(), target);
  }

  // optional bool output_predict_objects = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->output_predict_objects(), target);
  }

  // optional double reserved_invisible_time = 5 [default = 0.2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->reserved_invisible_time(), target);
  }

  // optional bool use_frame_timestamp = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_frame_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfEngineConfig)
  return target;
}

size_t MlfEngineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfEngineConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string main_sensor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->main_sensor_size());
  for (int i = 0, n = this->main_sensor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->main_sensor(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bool output_predict_objects = 4 [default = false];
    if (has_output_predict_objects()) {
      total_size += 1 + 1;
    }

    // optional bool use_frame_timestamp = 6 [default = false];
    if (has_use_frame_timestamp()) {
      total_size += 1 + 1;
    }

    // optional bool use_histogram_for_match = 2 [default = true];
    if (has_use_histogram_for_match()) {
      total_size += 1 + 1;
    }

    // optional uint32 histogram_bin_size = 3 [default = 10];
    if (has_histogram_bin_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->histogram_bin_size());
    }

    // optional double reserved_invisible_time = 5 [default = 0.2];
    if (has_reserved_invisible_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfEngineConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfEngineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfEngineConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MlfEngineConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfEngineConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfEngineConfig)
    MergeFrom(*source);
  }
}

void MlfEngineConfig::MergeFrom(const MlfEngineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfEngineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  main_sensor_.MergeFrom(from.main_sensor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      output_predict_objects_ = from.output_predict_objects_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_frame_timestamp_ = from.use_frame_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_histogram_for_match_ = from.use_histogram_for_match_;
    }
    if (cached_has_bits & 0x00000008u) {
      histogram_bin_size_ = from.histogram_bin_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      reserved_invisible_time_ = from.reserved_invisible_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfEngineConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfEngineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfEngineConfig::CopyFrom(const MlfEngineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfEngineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfEngineConfig::IsInitialized() const {
  return true;
}

void MlfEngineConfig::Swap(MlfEngineConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MlfEngineConfig::InternalSwap(MlfEngineConfig* other) {
  using std::swap;
  main_sensor_.InternalSwap(CastToBase(&other->main_sensor_));
  swap(output_predict_objects_, other->output_predict_objects_);
  swap(use_frame_timestamp_, other->use_frame_timestamp_);
  swap(use_histogram_for_match_, other->use_histogram_for_match_);
  swap(histogram_bin_size_, other->histogram_bin_size_);
  swap(reserved_invisible_time_, other->reserved_invisible_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MlfEngineConfig::GetMetadata() const {
  protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_multi_5flidar_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfDistanceWeight* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfDistanceWeight >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfDistanceWeight >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfDistanceConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfDistanceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfDistanceConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfTrackObjectMatcherConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfTrackObjectMatcherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfTrackObjectMatcherConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfTrackerConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfTrackerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfTrackerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfMotionFilterConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfMotionFilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfMotionFilterConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfMotionRefinerConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfMotionRefinerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfMotionRefinerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfShapeFilterConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfShapeFilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfShapeFilterConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MlfEngineConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfEngineConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfEngineConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
